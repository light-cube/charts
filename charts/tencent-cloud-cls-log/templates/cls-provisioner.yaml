apiVersion: v1
kind: ServiceAccount
metadata:
  name: cls-provisioner
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cls-provisioner
rules:
- apiGroups: ["cls.cloud.tencent.com"]
  resources: ["logconfigs"]
  verbs: ["get", "create", "list", "watch", "patch", "update", "delete"]
- apiGroups: [""]
  resources: ["nodes", "nodes/metrics", "endpoints", "pods", "namespaces", "configmaps", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors", "podmonitors", "scrapeconfigs"]
  verbs: ["*"]
- apiGroups: ["metrics.cls.tencent.com"]
  resources: ["metricconfigs", "promescrapeconfigs"]
  verbs: ["*"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cls-provisioner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cls-provisioner
subjects:
  - kind: ServiceAccount
    name: cls-provisioner
    namespace: {{ .Release.Namespace }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cls-provisioner
  namespace: {{ .Release.Namespace }}
  labels:
    {{ if .Values.label }}
    {{- range $key, $val := .Values.label }}
    {{ $key }}: {{ $val | quote }}
    {{- end }}
    {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cls-provisioner
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: cls-provisioner
        {{ if .Values.label }}
        {{- range $key, $val := .Values.label }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
        {{- end }}
    spec:
      containers:
        - command:
          - /vmagent-prod
          - -promscrape.config=/etc/vmagent/vmagent.yml
          - -httpListenAddr=:8080
          - -loggerLevel=INFO
          - -promscrape.configCheckInterval=30s
          - -remoteWrite.basicAuth.usernameFile=/etc/vmagent/username
          - -remoteWrite.basicAuth.passwordFile=/etc/vmagent/password
          - -promscrape.config.strictParse=false
          - -cred-sources={{ .Values.Certificate.Type }}
          {{ if eq .Values.Certificate.Type "configmap" }}
          - -cred-config-map=cls-credential
          - -namespace={{ .Release.Namespace }}
          {{ end }}
          env:
            - name: IS_PERSONAL_KUBE
              value: "true"
            - name: CLS_HOST
              value: {{ .Values.Endpoint }}
            - name: TKE_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: cls-k8s
                  key: cluster_id
            {{ if ne .Values.LocalRegion  "" }}
            - name: LOCAL_REGION
              value: {{ .Values.LocalRegion }}
            {{ end }}
            {{ if ne .Values.CloudAPI  "" }}
            - name: CLOUD_API
              value: {{ .Values.CloudAPI }}
            {{ end }}
            {{ if ne .Values.CloudAPIRegion "" }}
            - name: CLOUD_API_REGION
              value: {{ .Values.CloudAPIRegion }}
            {{ end }}
          image: {{ .Values.vmagentImage.Repository }}:{{ .Values.vmagentImage.Tag }}
          imagePullPolicy: Always
          name: vmagent
          resources:
            {{- toYaml .Values.vmagentResources | nindent 12 }}
          securityContext:
            privileged: false
        - args:
            - --cred-sources=$(CRED_SOURCES)
            {{ if eq .Values.Certificate.Type "configmap" }}
            - --cred-config-map=cls-credential
            - --namespace={{ .Release.Namespace }}
            {{ end }}
          command:
            - /cls-provisioner
          env:
            - name: CRED_SOURCES
              value: {{ .Values.Certificate.Type }}
            - name: CLS_HOST
              value: {{ .Values.Endpoint }}
            {{ if ne .Values.CloudAPI  "" }}
            - name: CLOUD_API
              value: {{ .Values.CloudAPI }}
            {{ end }}
            {{ if ne .Values.CloudAPIRegion "" }}
            - name: CLOUD_API_REGION
              value: {{ .Values.CloudAPIRegion }}
            {{ end }}
            - name: IS_PERSONAL_KUBE
              value: "true"
            - name: TKE_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: cls-k8s
                  key: cluster_id
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          image: {{ .Values.ControllerImage.Repository }}:{{ .Values.ControllerImage.Tag }}
          imagePullPolicy: Always
          name: cls-provisioner
          resources:
            {{- toYaml .Values.clsProvisionerResources | nindent 12 }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/localtime
              name: tz
            - mountPath: /var/run
              name: docker-host
            - mountPath: /run/containerd
              name: containerd-host
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext: {}
      serviceAccount: cls-provisioner
      serviceAccountName: cls-provisioner
      terminationGracePeriodSeconds: 30
      volumes:
        - hostPath:
            path: /etc/localtime
            type: ""
          name: tz
        - hostPath:
            path: /var/run
            type: ""
          name: docker-host
        - hostPath:
            path: /run/containerd
            type: ""
          name: containerd-host

